import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Navbar from "../components/Navbar";
import "bootstrap/dist/css/bootstrap.min.css";
import "./CreateEvent.css"; // <-- import ‡πÑ‡∏ü‡∏•‡πå CSS ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
import axios from "axios";

const CreateEvent = () => {
  const [formData, setFormData] = useState({
    eventName: "",
    description: "",
    date: "",
    time: "",
    location: "",
    category: "1", // Default category_id
    image: null,
  });

  const [errors, setErrors] = useState({});
  const [submissionError, setSubmissionError] = useState("");
  const [submissionSuccess, setSubmissionSuccess] = useState("");
  const navigate = useNavigate();

  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå");
      navigate("/login");
    }
  }, [navigate]);

  const handleChange = (e) => {
    const { id, value, files } = e.target;
    setFormData({
      ...formData,
      [id]: files ? files[0] : value,
    });
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.eventName.trim()) newErrors.eventName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå";
    if (!formData.date) newErrors.date = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà";
    if (!formData.time) newErrors.time = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤";
    if (!formData.location.trim()) newErrors.location = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setSubmissionError("");
    setSubmissionSuccess("");

    const eventData = new FormData();
    Object.entries(formData).forEach(([key, value]) => {
      eventData.append(key, value);
    });

    try {
      const token = localStorage.getItem("token"); // ‚úÖ ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Local Storage
      const response = await axios.post("http://localhost:5000/api/events/create", eventData, {
        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${token}`,
        },
      });

      console.log("‚úÖ Success:", response.data);
      setSubmissionSuccess(response.data.message);
      setTimeout(() => {
        navigate("/");
      }, 1500);
    } catch (error) {
      console.error(
        "‚ùå Error creating event:",
        error.response ? error.response.data : error.message
      );
      setSubmissionError(
        error.response
          ? error.response.data.error || error.response.data.message
          : error.message
      );
    }
  };

  return (
    <>
      <Navbar />
      <div className="container create-event-container mt-5">
        <div className="card create-event-card shadow">
          <div className="card-body">
            <h2 className="card-title create-event-title mb-4">üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà</h2>

            {/* ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î */}
            {submissionSuccess && (
              <div className="alert alert-success" role="alert">
                {submissionSuccess}
              </div>
            )}
            {submissionError && (
              <div className="alert alert-danger" role="alert">
                {submissionError}
              </div>
            )}

            <form onSubmit={handleSubmit}>
              {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå */}
              <div className="mb-3">
                <label htmlFor="eventName" className="form-label">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå <span className="text-danger">*</span>
                </label>
                <input
                  type="text"
                  className={`form-control ${errors.eventName && "is-invalid"}`}
                  id="eventName"
                  value={formData.eventName}
                  onChange={handleChange}
                />
                {errors.eventName && (
                  <div className="invalid-feedback">{errors.eventName}</div>
                )}
              </div>

              {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
              <div className="mb-3">
                <label htmlFor="description" className="form-label">
                  ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </label>
                <textarea
                  className="form-control"
                  id="description"
                  rows="3"
                  value={formData.description}
                  onChange={handleChange}
                ></textarea>
              </div>

              {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ */}
              <div className="row mb-3">
                <div className="col-md-6">
                  <label htmlFor="date" className="form-label">
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <span className="text-danger">*</span>
                  </label>
                  <input
                    type="date"
                    className={`form-control ${errors.date && "is-invalid"}`}
                    id="date"
                    value={formData.date}
                    onChange={handleChange}
                    min={new Date().toISOString().split("T")[0]}
                  />
                  {errors.date && (
                    <div className="invalid-feedback">{errors.date}</div>
                  )}
                </div>

                <div className="col-md-6">
                  <label htmlFor="time" className="form-label">
                    ‡πÄ‡∏ß‡∏•‡∏≤ <span className="text-danger">*</span>
                  </label>
                  <input
                    type="time"
                    className={`form-control ${errors.time && "is-invalid"}`}
                    id="time"
                    value={formData.time}
                    onChange={handleChange}
                  />
                  {errors.time && (
                    <div className="invalid-feedback">{errors.time}</div>
                  )}
                </div>
              </div>

              {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà */}
              <div className="mb-3">
                <label htmlFor="location" className="form-label">
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà <span className="text-danger">*</span>
                </label>
                <input
                  type="text"
                  className={`form-control ${errors.location && "is-invalid"}`}
                  id="location"
                  value={formData.location}
                  onChange={handleChange}
                />
                {errors.location && (
                  <div className="invalid-feedback">{errors.location}</div>
                )}
              </div>

              {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå */}
              <div className="mb-3">
                <label htmlFor="category" className="form-label">
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
                </label>
                <select
                  className="form-select"
                  id="category"
                  value={formData.category}
                  onChange={handleChange}
                >
                  <option value="1">‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</option>
                  <option value="2">‡∏î‡∏ô‡∏ï‡∏£‡∏µ</option>
                  <option value="3">‡∏Å‡∏µ‡∏¨‡∏≤</option>
                  <option value="4">‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                  <option value="5">‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à</option>
                </select>
              </div>

              {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
              <div className="mb-3">
                <label htmlFor="image" className="form-label">
                  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                </label>
                <input
                  type="file"
                  className="form-control"
                  id="image"
                  accept="image/*"
                  onChange={handleChange}
                />
              </div>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå */}
              <div className="d-flex justify-content-end gap-2">
                <Link to="/" className="btn btn-secondary">
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Link>
                <button type="submit" className="btn btn-success">
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
                </button>
                {/* 
                  ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏ó‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ className="btn-cancel" 
                  ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô CreateEvent.css ‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô 
                  <Link to="/" className="btn btn-cancel">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Link>
                */}
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
};

export default CreateEvent;
