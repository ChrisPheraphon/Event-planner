import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import db from "../config/db.js";
import dotenv from "dotenv";

dotenv.config();

const secretKey = process.env.JWT_SECRET;
if (!secretKey) {
  console.error("‚ö†Ô∏è  JWT_SECRET is not set in .env file!");
  process.exit(1);
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Register)
export const register = async (req, res) => {
  try {
    const { full_name, email, password } = req.body; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å username ‡πÄ‡∏õ‡πá‡∏ô full_name

    if (!full_name || !email || !password) {
      return res.status(400).json({ message: "All fields are required" });
    }

    const normalizedEmail = email.toLowerCase();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [existingUser] = await db.query("SELECT * FROM users WHERE email = ?", [normalizedEmail]);
    if (existingUser.length > 0) {
      return res.status(400).json({ message: "Email already exists" });
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ `full_name` ‡πÅ‡∏•‡∏∞ `password_hash`
    const [result] = await db.query(
      "INSERT INTO users (full_name, email, password_hash, created_at, updated_at) VALUES (?, ?, ?, NOW(), NOW())",
      [full_name, normalizedEmail, hashedPassword]
    );

    res.status(201).json({ message: "User registered successfully!", userId: result.insertId });
  } catch (err) {
    console.error("‚ùå Error in register:", err);
    res.status(500).json({ message: "Internal server error" });
  }
};


// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (Login)
export const login = async (req, res) => {
    try {
      const { email, password } = req.body;
  
      const normalizedEmail = email.toLowerCase();
      const [users] = await db.query("SELECT * FROM users WHERE email = ?", [normalizedEmail]);
  
      if (users.length === 0) {
        return res.status(401).json({ message: "Invalid email or password" });
      }
  
      const user = users[0];
      const isMatch = await bcrypt.compare(password, user.password_hash); // ‚úÖ ‡πÉ‡∏ä‡πâ password_hash ‡∏ï‡∏≤‡∏° database
  
      if (!isMatch) {
        return res.status(401).json({ message: "Invalid email or password" });
      }
  
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Session
      const token = jwt.sign({ id: user.user_id, email: user.email }, secretKey, { expiresIn: "1h" });
  
      res.json({
        message: "Login successful!",
        token,
        user: { user_id: user.user_id, full_name: user.full_name, email: user.email }
      });
    } catch (err) {
      console.error("‚ùå Error in login:", err);
      res.status(500).json({ message: "Internal server error" });
    }
  };
